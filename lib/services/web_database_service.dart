import 'package:flutter/material.dart';
import '../models/chemical_reaction.dart';
import '../models/substance.dart';
import '../models/quest.dart';
import 'progress_service.dart';

class WebDatabaseService {
  static final WebDatabaseService _instance = WebDatabaseService._internal();
  factory WebDatabaseService() => _instance;
  WebDatabaseService._internal() {
    // –£–ë–ò–†–ê–ï–ú –≤—ã–∑–æ–≤ _initializeData() –∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
    // –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
  }

  final List<Substance> _substances = [];
  final List<ChemicalReaction> _reactions = [];
  final List<Quest> _quests = [];
  
  int _playerPoints = 0;
  final List<int> _completedQuests = [];
  
  final ProgressService _progressService = ProgressService();

  bool _isInitialized = false;
  bool _isInitializing = false;

  Future<void> _initializeData() async {
    if (_isInitialized || _isInitializing) {
      print('WebDatabaseService already initialized or initializing, skipping...');
      return;
    }
    
    _isInitializing = true;
    print('üîÑ Initializing web database...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    _playerPoints = await _progressService.getPlayerPoints();
    final savedQuests = await _progressService.getCompletedQuests();
    _completedQuests.addAll(savedQuests);
    
    print('üì• Loaded progress: $_playerPoints points, ${_completedQuests.length} completed quests');

    // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú –î–ê–ù–ù–´–ï –¢–û–õ–¨–ö–û –ï–°–õ–ò –û–ù–ò –ü–£–°–¢–´–ï
    if (_substances.isEmpty) {
      _substances.addAll([
        Substance(substanceId: 1, name: '–í–æ–¥–æ—Ä–æ–¥', formula: 'H2', molarMass: 2.02, description: '–õ–µ–≥–∫–∏–π –≥–æ—Ä—é—á–∏–π –≥–∞–∑'),
        Substance(substanceId: 2, name: '–ö–∏—Å–ª–æ—Ä–æ–¥', formula: 'O2', molarMass: 32.00, description: '–ì–∞–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–ª—è –¥—ã—Ö–∞–Ω–∏—è'),
        Substance(substanceId: 3, name: '–í–æ–¥–∞', formula: 'H2O', molarMass: 18.02, description: '–û–∫—Å–∏–¥ –≤–æ–¥–æ—Ä–æ–¥–∞'),
        Substance(substanceId: 4, name: '–£–≥–ª–µ—Ä–æ–¥', formula: 'C', molarMass: 12.01, description: '–û—Å–Ω–æ–≤–Ω–æ–π —ç–ª–µ–º–µ–Ω—Ç –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–π —Ö–∏–º–∏–∏'),
        Substance(substanceId: 5, name: '–î–∏–æ–∫—Å–∏–¥ —É–≥–ª–µ—Ä–æ–¥–∞', formula: 'CO2', molarMass: 44.01, description: '–£–≥–ª–µ–∫–∏—Å–ª—ã–π –≥–∞–∑'),
        Substance(substanceId: 6, name: '–ú–µ—Ç–∞–Ω', formula: 'CH4', molarMass: 16.04, description: '–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏—Ä–æ–¥–Ω–æ–≥–æ –≥–∞–∑–∞'),
      ]);
      print('üß™ Added ${_substances.length} substances');
    }

    if (_reactions.isEmpty) {
      _reactions.addAll([
        ChemicalReaction(reactionId: 1, reactionString: '2H‚ÇÇ + O‚ÇÇ ‚Üí 2H‚ÇÇO', reactants: 'H2:2,O2:1', products: 'H2O:2', balancedCoefficients: '2,1,2'),
        ChemicalReaction(reactionId: 2, reactionString: 'C + O‚ÇÇ ‚Üí CO‚ÇÇ', reactants: 'C:1,O2:1', products: 'CO2:1', balancedCoefficients: '1,1,1'),
        ChemicalReaction(reactionId: 3, reactionString: 'CH‚ÇÑ + 2O‚ÇÇ ‚Üí CO‚ÇÇ + 2H‚ÇÇO', reactants: 'CH4:1,O2:2', products: 'CO2:1,H2O:2', balancedCoefficients: '1,2,1,2'),
      ]);
      print('‚öóÔ∏è Added ${_reactions.length} reactions');
    }

    if (_quests.isEmpty) {
      _quests.addAll([
        Quest(questId: 1, title: '–°–ò–ù–¢–ï–ó –í–û–î–´', description: '–ü–æ–ª—É—á–∏—Ç–µ 36.04 –≥ –≤–æ–¥—ã –∏–∑ –≤–æ–¥–æ—Ä–æ–¥–∞ –∏ –∫–∏—Å–ª–æ—Ä–æ–¥–∞', targetSubstanceId: 3, targetAmount: 36.04, availableReagents: '1,2', rewardPoints: 100),
        Quest(questId: 2, title: '–ü–û–õ–£–ß–ï–ù–ò–ï CO‚ÇÇ', description: '–ü–æ–ª—É—á–∏—Ç–µ 44.01 –≥ –¥–∏–æ–∫—Å–∏–¥–∞ —É–≥–ª–µ—Ä–æ–¥–∞ –∏–∑ —É–≥–ª–µ—Ä–æ–¥–∞ –∏ –∫–∏—Å–ª–æ—Ä–æ–¥–∞', targetSubstanceId: 5, targetAmount: 44.01, availableReagents: '4,2', rewardPoints: 150),
        Quest(questId: 3, title: '–°–ñ–ò–ì–ê–ù–ò–ï –ú–ï–¢–ê–ù–ê', description: '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–∫—Ü–∏—é –≥–æ—Ä–µ–Ω–∏—è –º–µ—Ç–∞–Ω–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º CO‚ÇÇ –∏ –≤–æ–¥—ã', targetSubstanceId: 5, targetAmount: 88.02, availableReagents: '6,2', rewardPoints: 200),
        Quest(questId: 4, title: '–†–ï–ê–ö–¶–ò–Ø –ù–ï–ô–¢–†–ê–õ–ò–ó–ê–¶–ò–ò', description: '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–∫—Ü–∏—é –Ω–µ–π—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏–∏', targetSubstanceId: 3, targetAmount: 50.0, availableReagents: '1,2', rewardPoints: 250),
        Quest(questId: 5, title: '–≠–õ–ï–ö–¢–†–û–õ–ò–ó –í–û–î–´', description: '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–ª–∏–∑ –≤–æ–¥—ã', targetSubstanceId: 3, targetAmount: 60.0, availableReagents: '3', rewardPoints: 300),
      ]);
      print('üéØ Added ${_quests.length} quests');
    }

    _isInitialized = true;
    _isInitializing = false;
    
    print('‚úÖ Web database initialized:');
    print('   - Substances: ${_substances.length}');
    print('   - Reactions: ${_reactions.length}');
    print('   - Quests: ${_quests.length}');
    print('   - Player points: $_playerPoints');
    print('   - Completed quests: ${_completedQuests.length}');
  }

  // –ì–µ—Ç—Ç–µ—Ä—ã - –û–ë–ï–°–ü–ï–ß–ò–í–ê–ï–ú –ï–î–ò–ù–û–ö–†–ê–¢–ù–£–Æ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Æ
  Future<List<Substance>> getAllSubstances() async {
    if (!_isInitialized) await _initializeData();
    await Future.delayed(const Duration(milliseconds: 100));
    return List.from(_substances);
  }

  Future<List<Quest>> getAllQuests() async {
    if (!_isInitialized) await _initializeData();
    await Future.delayed(const Duration(milliseconds: 100));
    return List.from(_quests);
  }

  Future<List<ChemicalReaction>> getAllReactions() async {
    if (!_isInitialized) await _initializeData();
    await Future.delayed(const Duration(milliseconds: 100));
    return List.from(_reactions);
  }

  Future<Map<String, dynamic>> loadPlayerProgress(int playerId) async {
    if (!_isInitialized) await _initializeData();
    await Future.delayed(const Duration(milliseconds: 50));
    return {
      'points': _playerPoints,
      'completedQuests': _completedQuests.join(','),
    };
  }

  Future<void> resetPlayerProgress(int playerId) async {
    await Future.delayed(const Duration(milliseconds: 50));
    _playerPoints = 0;
    _completedQuests.clear();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    await _progressService.resetProgress();
    
    print('üîÑ Progress reset in web database');
  }

  void completeQuest(int questId) {
    if (!_completedQuests.contains(questId)) {
      _completedQuests.add(questId);
      final quest = _quests.firstWhere((q) => q.questId == questId);
      _playerPoints += quest.rewardPoints;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      _saveProgressAsync();
      
      print('üéâ Quest $questId completed. Total points: $_playerPoints');
    }
  }

  Future<void> _saveProgressAsync() async {
    await _progressService.savePlayerPoints(_playerPoints);
    await _progressService.saveCompletedQuests(_completedQuests);
  }

  List<Quest> getAvailableQuests() {
    return _quests.where((q) => !_completedQuests.contains(q.questId)).toList();
  }

  // –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
  int get playerPoints => _playerPoints;
  List<int> get completedQuests => List.from(_completedQuests);
  bool get isInitialized => _isInitialized;

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
  Future<void> hardReset() async {
    _isInitialized = false;
    _isInitializing = false;
    _substances.clear();
    _reactions.clear();
    _quests.clear();
    _playerPoints = 0;
    _completedQuests.clear();
    
    await _progressService.resetProgress();
    print('üí• Hard reset complete - all data cleared');
  }
}